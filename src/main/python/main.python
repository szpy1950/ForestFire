# visualize_forest_fire.py
# Python script to visualize the forest fire simulation

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import ListedColormap
import matplotlib.animation as animation
import os
import glob

# Color mapping for different cell types
colors = [
    '#0077BE',    # 0: Water (blue)
    '#D3D3D3',    # 1: Empty (light gray)
    '#90EE90',    # 2: Grass (light green)
    '#228B22',    # 3: Bush (forest green)
    '#006400',    # 4: Small Tree (dark green)
    '#8B4513',    # 5: Growing Tree (saddle brown)
    '#654321',    # 6: Mature Tree (dark brown)
    '#FF4500',    # 7: On Fire (orange red)
    '#2F4F4F'     # 8: Destroyed (dark slate gray)
]

cell_names = ['Water', 'Empty', 'Grass', 'Bush', 'Small Tree', 'Growing Tree', 'Mature Tree', 'On Fire', 'Destroyed']
cmap = ListedColormap(colors)

def load_grid_data(csv_file):
    """Load grid data from CSV file"""
    df = pd.read_csv(csv_file)

    # Get grid dimensions
    max_x = df['x'].max() + 1
    max_y = df['y'].max() + 1

    # Create grid
    grid = np.zeros((max_y, max_x))

    for _, row in df.iterrows():
        grid[int(row['y']), int(row['x'])] = row['cell_type']

    return grid, df['time_step'].iloc[0] if 'time_step' in df.columns else 0

def visualize_single_step(csv_file, save_path=None):
    """Visualize a single time step"""
    grid, time_step = load_grid_data(csv_file)

    plt.figure(figsize=(12, 10))
    im = plt.imshow(grid, cmap=cmap, vmin=0, vmax=8)

    plt.title(f'Forest Fire Simulation - Time Step {time_step}', fontsize=16, fontweight='bold')
    plt.xlabel('X Coordinate', fontsize=12)
    plt.ylabel('Y Coordinate', fontsize=12)

    # Create custom colorbar
    cbar = plt.colorbar(im, ticks=range(9))
    cbar.set_ticklabels(cell_names)
    cbar.set_label('Cell Type', fontsize=12)

    # Add grid lines for better visibility
    plt.grid(True, alpha=0.3)

    if save_path:
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        print(f"Saved visualization to {save_path}")
    else:
        plt.show()

    plt.close()

def create_animation(data_directory, output_file='forest_fire_animation.gif'):
    """Create animation from all time steps"""

    # Get all CSV files
    csv_files = sorted(glob.glob(os.path.join(data_directory, 'forest_fire_step_*.csv')))

    if not csv_files:
        print(f"No CSV files found in {data_directory}")
        return

    print(f"Found {len(csv_files)} time steps")

    # Load first frame to get dimensions
    first_grid, _ = load_grid_data(csv_files[0])

    # Set up the figure and axis
    fig, ax = plt.subplots(figsize=(12, 10))
    im = ax.imshow(first_grid, cmap=cmap, vmin=0, vmax=8)

    ax.set_xlabel('X Coordinate', fontsize=12)
    ax.set_ylabel('Y Coordinate', fontsize=12)

    # Create colorbar
    cbar = plt.colorbar(im, ticks=range(9))
    cbar.set_ticklabels(cell_names)
    cbar.set_label('Cell Type', fontsize=12)

    title = ax.set_title('Forest Fire Simulation - Time Step 0', fontsize=16, fontweight='bold')

    def animate(frame):
        if frame < len(csv_files):
            grid, time_step = load_grid_data(csv_files[frame])
            im.set_array(grid)
            title.set_text(f'Forest Fire Simulation - Time Step {time_step}')
        return [im, title]

    # Create animation
    anim = animation.FuncAnimation(fig, animate, frames=len(csv_files),
                                 interval=500, blit=False, repeat=True)

    # Save animation
    anim.save(output_file, writer='pillow', fps=2)
    print(f"Animation saved to {output_file}")

    plt.show()

def analyze_statistics(metadata_file):
    """Analyze and plot simulation statistics"""
    df = pd.read_csv(metadata_file)

    fig, axes = plt.subplots(2, 2, figsize=(15, 12))

    # Plot 1: Fire progression
    axes[0, 0].plot(df['time_step'], df['on_fire'], 'r-', linewidth=2, label='Currently Burning')
    axes[0, 0].plot(df['time_step'], df['destroyed'], 'k-', linewidth=2, label='Destroyed')
    axes[0, 0].plot(df['time_step'], df['total_burned'], 'orange', linewidth=2, label='Total Burned')
    axes[0, 0].set_xlabel('Time Step')
    axes[0, 0].set_ylabel('Number of Cells')
    axes[0, 0].set_title('Fire Progression Over Time')
    axes[0, 0].legend()
    axes[0, 0].grid(True, alpha=0.3)

    # Plot 2: Vegetation remaining
    vegetation_cols = ['grass', 'bush', 'small_tree', 'growing_tree', 'mature_tree']
    for col in vegetation_cols:
        if col in df.columns:
            axes[0, 1].plot(df['time_step'], df[col], linewidth=2, label=col.replace('_', ' ').title())
    axes[0, 1].set_xlabel('Time Step')
    axes[0, 1].set_ylabel('Number of Cells')
    axes[0, 1].set_title('Remaining Vegetation Over Time')
    axes[0, 1].legend()
    axes[0, 1].grid(True, alpha=0.3)

    # Plot 3: Fire intensity (rate of change)
    fire_rate = df['on_fire'].diff().fillna(0)
    axes[1, 0].plot(df['time_step'], fire_rate, 'r-', linewidth=2)
    axes[1, 0].axhline(y=0, color='k', linestyle='--', alpha=0.5)
    axes[1, 0].set_xlabel('Time Step')
    axes[1, 0].set_ylabel('Change in Burning Cells')
    axes[1, 0].set_title('Fire Spread Rate')
    axes[1, 0].grid(True, alpha=0.3)

    # Plot 4: Cumulative burned area
    axes[1, 1].fill_between(df['time_step'], df['total_burned'], alpha=0.7, color='orange')
    axes[1, 1].set_xlabel('Time Step')
    axes[1, 1].set_ylabel('Total Burned Area')
    axes[1, 1].set_title('Cumulative Burned Area')
    axes[1, 1].grid(True, alpha=0.3)

    plt.tight_layout()
    plt.savefig('simulation_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()

def create_comparison_plot(data_directory):
    """Create before/during/after comparison"""
    csv_files = sorted(glob.glob(os.path.join(data_directory, 'forest_fire_step_*.csv')))

    if len(csv_files) < 3:
        print("Need at least 3 time steps for comparison")
        return

    # Select key time points
    initial = csv_files[0]
    middle = csv_files[len(csv_files)//2]
    final = csv_files[-1]

    fig, axes = plt.subplots(1, 3, figsize=(18, 6))

    for i, (csv_file, title) in enumerate([(initial, 'Initial'), (middle, 'Mid-Simulation'), (final, 'Final')]):
        grid, time_step = load_grid_data(csv_file)

        im = axes[i].imshow(grid, cmap=cmap, vmin=0, vmax=8)
        axes[i].set_title(f'{title} State (Time {time_step})', fontsize=14, fontweight='bold')
        axes[i].set_xlabel('X Coordinate')
        axes[i].set_ylabel('Y Coordinate')

    # Add shared colorbar
    fig.subplots_adjust(right=0.85)
    cbar_ax = fig.add_axes([0.87, 0.15, 0.02, 0.7])
    cbar = fig.colorbar(im, cax=cbar_ax, ticks=range(9))
    cbar.set_ticklabels(cell_names)
    cbar.set_label('Cell Type', fontsize=12)

    plt.savefig('simulation_comparison.png', dpi=300, bbox_inches='tight')
    plt.show()

# Main execution
if __name__ == "__main__":
    data_dir = "simulation_output"

    print("🎨 Forest Fire Visualization Tool")
    print("="*40)

    if not os.path.exists(data_dir):
        print(f"❌ Data directory '{data_dir}' not found!")
        print("Make sure to run the Scala simulation first.")
        exit(1)

    # Check what files are available
    csv_files = glob.glob(os.path.join(data_dir, 'forest_fire_step_*.csv'))
    csv_files = glob.glob(os.path.join(data_dir, 'forest_fire_step_*.csv'))
    metadata_file = os.path.join(data_dir, 'simulation_metadata.csv')

    print(f"📁 Found {len(csv_files)} grid files")

    if csv_files:
        print("\n1️⃣ Creating step-by-step visualization...")

        # Visualize key time steps
        key_steps = [0, len(csv_files)//4, len(csv_files)//2, 3*len(csv_files)//4, len(csv_files)-1]
        for step in key_steps:
            if step < len(csv_files):
                visualize_single_step(csv_files[step], f'forest_fire_step_{step:03d}.png')

        print("\n2️⃣ Creating comparison plot...")
        create_comparison_plot(data_dir)

        print("\n3️⃣ Creating animation...")
        create_animation(data_dir)

    if os.path.exists(metadata_file):
        print("\n4️⃣ Analyzing statistics...")
        analyze_statistics(metadata_file)

    print("\n✅ Visualization complete!")
    print("📊 Check the generated PNG files and GIF animation.")